<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    开启注解扫描,希望处理service与dao,controller层不需要spring去处理(这是springmvc的活儿)-->
    <context:component-scan base-package="com.xycode.ssmEX">

<!--        exclude-filter type="annotation", 配置哪些注解不扫描,这里就是排除springmvc的注解: @Controller -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

<!--    notice: spring整合mybatis框架,把mybatis的相关类对象交给spring IOC容器来管理,配置完以后,mybatis的配置文件就没必要存在了-->
<!--    配置数据源-->
    <context:property-placeholder location="classpath:druid.properties" system-properties-mode="FALLBACK"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${password}"/>
    </bean>

<!--    配置sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    配置Dao所在的包位置,功能相当于<mappers>的<package>标签-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xycode.ssmEX.dao"/>
    </bean>

    <!--    开启AOP注解支持-->
    <aop:aspectj-autoproxy/>
    <!--    开启spring事务管理器的注解支持-->
    <tx:annotation-driven transaction-manager="springTsManager"/>
    <!--    配置spring的事务管理器-->
    <bean id="springTsManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="springTsManager">
        <tx:attributes>
            <!--            findXXX()方法通配,优先级更高-->
            <tx:method name="find*" read-only="true"/>
            <tx:method name="*" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <!--    配置AOP-->
    <aop:config>
<!--        增强com.xycode.ssmEX.service.impl.UserServiceImpl的所有方法-->
        <aop:pointcut id="pt" expression="execution(* com.xycode.ssmEX.service.impl.UserServiceImpl.*(..))"/>
        <!--    这里的配置会将DataSourceTransactionManager的四种通知自动AOP到pt所表示的方法-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
    </aop:config>
</beans>