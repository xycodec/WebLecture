<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
        <!--    配置Spring IOC-->
    <bean id="accountService" class="com.xycode.springLecture.aopEX.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>
    <bean id="accountDao" class="com.xycode.springLecture.aopEX.impl.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" scope="prototype">
        <!--        构造函数注入数据源,因为这是jar包中的类,没有set方法,所以通过构造函数的方式来注入,JdbcTemplate有这样的构造器-->
        <constructor-arg ref="dataSource"/>
    </bean>

    <!--    tip: 指定配置文件的路径,前缀classpath代表类路径,与ClassLoader方式读取类似-->
    <context:property-placeholder location="classpath:druid.properties" system-properties-mode="FALLBACK"/>
    <!--    数据源bean,这里使用DruidDataSource-->
    <!--    warn: username貌似默认会读到电脑的用户名而不是配置文件中的值,加上system-properties-mode="FALLBACK"就可以了(或者不用username这个key)-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${password}"/>
    </bean>



<!--    warn: 这个事务控制不能用到JdbcTemplate上-->
<!--    配置事务管理器,下面会将该bean切面进accountService中,以增强accountService的功能-->
    <bean id="tsManager" class="com.xycode.springLecture.aopEX.impl.TransactionManager">
        <property name="connectionUtils" ref="connectionUtils"/>
    </bean>
<!--    配置工具类的bean-->
    <bean id="connectionUtils" class="com.xycode.springLecture.aopEX.impl.ConnectionUtils">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    配置AOP
    method属性: 指定切入的方法
    pointcut属性: 指定增强方法(被切入的方法),method指定的方法会以指定方式切入到pointcut指定的位置(apo:before就是切到前面)
    execution(切面表达式):
        切面表达式类似这样: public void com.xycode.springLecture.aopEX.impl.AccountServiceImpl.findAccountByID(int)
        通配形式的表达式,首先访问类型修饰符考研省略,返回类型/方法名可以用*代替,而包名使用*.来代替,参数列表写成这样..,表示任意个参数(包括0个)
        即上述表达式可以写成这样: * *.*.*.*.*.*.*(..), 当然,这样就是全通配了,一般我们不这么使用,而是这省略一部分,
        例如: * com.xycode.springLecture.aopEX.impl.AccountServiceImpl.*(..), 这样只通配指定类下面的所有方法(也可以指定某个包的所有类)

-->
    <aop:config>
        <aop:aspect id="tsManager" ref="tsManager">

<!--            通配AOP表达式-->
            <aop:pointcut id="pt" expression="execution(* com.xycode.springLecture.aopEX.impl.AccountServiceImpl.*(..))"/>
<!--            前置通知: 开启事务-->
            <aop:before method="startTransaction" pointcut-ref="pt"/>
<!--            后置通知: 提交事务-->
            <aop:after-returning method="commit" pointcut-ref="pt"/>
<!--            异常通知: 回滚事务-->
            <aop:after-throwing method="rollback" pointcut-ref="pt"/>
<!--            最后通知: 释放连接(终止事务)-->
            <aop:after method="release" pointcut-ref="pt"/>

        </aop:aspect>
    </aop:config>

<!--    开启AOP注解支持-->
    <aop:aspectj-autoproxy/>


</beans>